{"version":3,"sources":["Componets/TodoItem.js","todosData.js","App.js","serviceWorker.js","index.js"],"names":["deleteIconImg","process","TodoItem","props","className","src","alt","onClick","handleChange","id","text","todosData","App","handleOnChangeTask","event","a","this","setState","value","target","state","todos","task","stateWord","bind","preState","filter","todo","trimValue","trim","length","newTask","Math","random","alert","map","key","type","size","height","onChange","addTask","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAEMA,G,YAAgBC,oCAgBPC,MAdf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,aACb,yBACEA,UAAU,eACVC,IAAKL,EACLM,IAAI,SACJC,QAAS,kBAAMJ,EAAMK,aAAaL,EAAMM,OAE1C,+BAAKN,EAAMO,KAAX,OCESC,EAfG,CAChB,CACEF,GAAI,EACJC,KAAM,iBAER,CACED,GAAI,EACJC,KAAM,mBAER,CACED,GAAI,EACJC,KAAM,iBC8EKE,E,YAnFb,aAAe,IAAD,8BACZ,+CAyBFC,mBA1Bc,uCA0BO,WAAgBC,GAAhB,SAAAC,EAAA,sEACbC,KAAKC,SAAS,CAAEC,MAAOJ,EAAMK,OAAOD,QADvB,gDA1BP,sDAEZ,EAAKE,MAAQ,CACXC,MAAOV,EACPW,KAAM,CACJb,GAAI,GACJC,KAAM,IAERQ,MAAO,GACPK,UAAW,uBAEb,EAAKf,aAAe,EAAKA,aAAagB,KAAlB,gBAXR,E,0EAcDf,GACXO,KAAKC,UAAS,SAACQ,GAKb,MAAO,CACLJ,MALmBI,EAASJ,MAAMK,QAAO,SAACC,GAC1C,OAAOA,EAAKlB,KAAOA,W,gCAcvB,IAAMmB,EAAYZ,KAAKI,MAAMF,MAAMW,OACnC,GAAKD,EAAUE,OAAf,CAIA,IAAMC,EAAU,CACdtB,GAAoB,IAAhBuB,KAAKC,SACTvB,KAAMkB,GAGRZ,KAAKC,SAAS,CACZI,MAAM,GAAD,mBAAML,KAAKI,MAAMC,OAAjB,CAAwBU,MAG/Bf,KAAKC,SAAS,CAAEC,MAAO,WAZrBgB,MAAM,qB,+BAeA,IAAD,OACDP,EAAOX,KAAKI,MAAMC,MAAMc,KAAI,SAACR,GAAD,OAChC,kBAAC,EAAD,CACES,IAAKT,EAAKlB,GACVC,KAAMiB,EAAKjB,KACXD,GAAIkB,EAAKlB,GACTD,aAAc,EAAKA,aAAagB,KAAK,QAGzC,OACE,yBAAKpB,UAAU,aACb,wBAAIA,UAAU,gBAAgBY,KAAKI,MAAMG,WACzC,yBAAKnB,UAAU,aACb,2BACEiC,KAAK,OACLC,KAAK,KACLC,OAAO,OACPrB,MAAOF,KAAKI,MAAMF,MAClBsB,SAAUxB,KAAKH,mBAAmBW,KAAKR,QACtC,IACH,4BAAQZ,UAAU,UAAUG,QAASS,KAAKyB,QAAQjB,KAAKR,OACpD,IADH,WAEW,MAGVW,EAAKG,OACNH,EAEA,wBAAIvB,UAAU,gBAAd,yB,GA7EQsC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.caac62b1.chunk.js","sourcesContent":["import React from 'react';\nimport './todo-item.css';\nconst deleteIconImg = process.env.PUBLIC_URL + '/delete-icon.png';\n\nfunction TodoItem(props) {\n  return (\n    <div className='todo-item'>\n      <img\n        className='image-delete'\n        src={deleteIconImg}\n        alt='Delete'\n        onClick={() => props.handleChange(props.id)}\n      />\n      <p> {props.text} </p>\n    </div>\n  );\n}\n\nexport default TodoItem;\n","const todosData = [\n  {\n    id: 1,\n    text: 'work on React',\n  },\n  {\n    id: 2,\n    text: 'work on Angular',\n  },\n  {\n    id: 3,\n    text: 'work on Node',\n  },\n];\n\nexport default todosData;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoItem from './Componets/TodoItem';\nimport todosData from './todosData';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: todosData,\n      task: {\n        id: '',\n        text: '',\n      },\n      value: '',\n      stateWord: 'Task List For Today',\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(id) {\n    this.setState((preState) => {\n      const updatedTodos = preState.todos.filter((todo) => {\n        return todo.id !== id;\n      });\n\n      return {\n        todos: updatedTodos,\n      };\n    });\n  }\n\n  handleOnChangeTask = async function (event) {\n    await this.setState({ value: event.target.value });\n  };\n\n  addTask() {\n    const trimValue = this.state.value.trim();\n    if (!trimValue.length) {\n      alert('Please Add Task');\n      return;\n    }\n    const newTask = {\n      id: Math.random() * 100,\n      text: trimValue,\n    };\n\n    this.setState({\n      todos: [...this.state.todos, newTask],\n    });\n\n    this.setState({ value: ' ' });\n  }\n\n  render() {\n    const todo = this.state.todos.map((todo) => (\n      <TodoItem\n        key={todo.id}\n        text={todo.text}\n        id={todo.id}\n        handleChange={this.handleChange.bind(this)}\n      />\n    ));\n    return (\n      <div className='todo-list'>\n        <h3 className='header-class'>{this.state.stateWord}</h3>\n        <div className='container'>\n          <input\n            type='text'\n            size='50'\n            height='20px'\n            value={this.state.value}\n            onChange={this.handleOnChangeTask.bind(this)}\n          />{' '}\n          <button className='add-btn' onClick={this.addTask.bind(this)}>\n            {' '}\n            Add Task{' '}\n          </button>\n        </div>\n        {!!todo.length ? (\n          todo\n        ) : (\n          <h1 className='header-class'> Please Add Task</h1>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}